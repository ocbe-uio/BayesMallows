% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_initial_ranking.R
\name{generate_initial_ranking}
\alias{generate_initial_ranking}
\alias{generate_initial_ranking.BayesMallowsTransitiveClosure}
\alias{generate_initial_ranking.BayesMallowsIntransitive}
\title{Generate Initial Ranking}
\usage{
generate_initial_ranking(
  preferences,
  n_items,
  cl = NULL,
  shuffle_unranked = FALSE,
  random = FALSE,
  random_limit = 8L
)

\method{generate_initial_ranking}{BayesMallowsTransitiveClosure}(
  preferences,
  n_items,
  cl = NULL,
  shuffle_unranked = FALSE,
  random = FALSE,
  random_limit = 8L
)

\method{generate_initial_ranking}{BayesMallowsIntransitive}(preferences, n_items, cl = NULL)
}
\arguments{
\item{preferences}{Pairwise preferences returned from \code{\link[=generative_transitive_closure]{generative_transitive_closure()}}.}

\item{n_items}{The total number of items.}

\item{cl}{Optional computing cluster used for parallelization, returned from
\code{\link[parallel:makeCluster]{parallel::makeCluster()}}. Defaults to \code{NULL}.}

\item{shuffle_unranked}{Logical specifying whether or not to randomly
permuted unranked items in the initial ranking. When
\code{shuffle_unranked=TRUE} and \code{random=FALSE}, all unranked items
for each assessor are randomly permuted. Otherwise, the first ordering
returned by \code{igraph::topo_sort()} is returned.}

\item{random}{Logical specifying whether or not to use a random initial
ranking. Defaults to \code{FALSE}. Setting this to \code{TRUE} means that
all possible orderings consistent with the stated pairwise preferences are
generated for each assessor, and one of them is picked at random.}

\item{random_limit}{Integer specifying the maximum number of items allowed
when all possible orderings are computed, i.e., when \code{random=TRUE}.
Defaults to \code{8L}.}
}
\value{
A matrix of rankings which can be given in the \code{rankings}
argument to \code{\link[=compute_mallows]{compute_mallows()}}.
}
\description{
Given a consistent set of pairwise preferences, generate a complete ranking
of items which is consistent with the preferences.
}
\note{
Setting \code{random=TRUE} means that all possible orderings of each
assessor's preferences are generated, and one of them is picked at random.
This can be useful when experiencing convergence issues, e.g., if the MCMC
algorithm does not mix properly. However, finding all possible orderings
is a combinatorial problem, which may be computationally very hard. The
result may not even be possible to fit in memory, which may cause the R
session to crash. When using this option, please try to increase the size
of the problem incrementally, by starting with smaller subsets of the
complete data. An example is given below.

As detailed in the documentation to \code{\link[=generate_transitive_closure]{generate_transitive_closure()}},
it is assumed that the items are labeled starting from 1. For example, if a single
comparison of the following form is provided, it is assumed that there is a total
of 30 items (\code{n_items=30}), and the initial ranking is a permutation of these 30
items consistent with the preference 29<30.

\tabular{rrr}{
\strong{assessor} \tab \strong{bottom_item} \tab \strong{top_item}\cr
1 \tab 29 \tab 30\cr
}

If in reality there are only two items, they should be relabeled to 1 and 2, as follows:

\tabular{rrr}{
\strong{assessor} \tab \strong{bottom_item} \tab \strong{top_item}\cr
1 \tab 1 \tab 2\cr
}
}
\seealso{
Other preprocessing: 
\code{\link{estimate_partition_function}()},
\code{\link{get_transitive_closure}()}
}
\concept{preprocessing}
